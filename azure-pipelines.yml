###############################################################################
# S3 bucket via shared ADO Git module (pin the tag youâ€™ve been told to use)
###############################################################################

data "aws_canonical_user_id" "this" {}

# If you send grant as JSON string, we'll jsondecode it here.
locals {
  grants              = try(jsondecode(var.grant), var.grant)
  lower_bucket_name   = lower(var.bucket_name)
  forced_destroy      = var.force_destroy
  encrypt_conf        = var.server_side_encryption_configuration
  policy              = var.bucket_policy_json
  tags                = var.tags
}

module "s3" {
  # HTTPS (Method B). Keep the double slash before the module subdir.
  # If you prefer SSH (Method C), replace source with the ssh:// form; nothing
  # else changes.
  source = "git::https://dev.azure.com/samcado/Infrastructure%20Operations/_git/DEVOPS_Platform_as_a_Service/s3//terraform-3.1.0-s3-bucket?ref=${var.module_ref}"

  # --- required / common inputs for that module ---
  bucket = local.lower_bucket_name

  versioning = {
    enabled = var.versioning_enabled
  }

  attach_policy                        = true
  force_destroy                        = local.forced_destroy
  block_public_acls                    = var.block_public_acls
  block_public_policy                  = var.block_public_policy
  server_side_encryption_configuration = local.encrypt_conf
  policy                               = local.policy
  ignore_public_acls                   = var.ignore_public_acls
  lifecycle_rule                       = var.lifecycle_rule
  restrict_public_buckets              = var.restrict_public_buckets
  control_object_ownership             = var.control_object_ownership
  object_ownership                     = var.object_ownership
  object_lock_enabled                  = var.object_lock_enabled
  object_lock_configuration            = var.object_lock_configuration

  tags = merge({
    Name                         = local.lower_bucket_name,
    "continuous_backups_enabled" = var.continuous_backups_enabled
  }, local.tags)
}

# Keep your ACL/grants logic exactly as in your snippet
resource "aws_s3_bucket_acl" "this" {
  depends_on = [module.s3]

  count = var.object_ownership == "BucketOwnerEnforced"
    ? 0
    : (
        (var.acl != null && var.acl != "null" && var.acl != "")
        || length(local.grants) > 0
      ) ? 1 : 0

  bucket                = module.s3.s3_bucket_id
  expected_bucket_owner = var.expected_bucket_owner

  # when null is passed through wrappers/terragrunt
  acl = var.acl != null ? var.acl : null

  dynamic "access_control_policy" {
    for_each = length(local.grants) > 0 ? [true] : []

    content {
      dynamic "grant" {
        for_each = local.grants

        content {
          permission = grant.value.permission

          grantee {
            type          = grant.value.type
            id            = try(grant.value.id, null)
            uri           = try(grant.value.uri, null)
            email_address = try(grant.value.email, null)
          }
        }
      }

      owner {
        id           = try(var.owner["id"], data.aws_canonical_user_id.this.id)
        display_name = try(var.owner["display_name"], null)
      }
    }
  }
}
