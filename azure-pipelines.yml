provider "aws" {
  region = "us-east-1"
}

# S3 Bucket
resource "aws_s3_bucket" "test_bucket" {
  bucket = "test-s3-bucket-for-lambda-access"
  acl    = "private"
}

# IAM Role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "lambda-test-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# IAM Policy for full access to S3 and CloudWatch Synthetics
resource "aws_iam_policy" "lambda_policy" {
  name        = "lambda-full-access-policy"
  description = "Full access to S3 bucket and CloudWatch Synthetics"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:*"
        ],
        Resource = [
          "${aws_s3_bucket.test_bucket.arn}",
          "${aws_s3_bucket.test_bucket.arn}/*"
        ]
      },
      {
        Effect = "Allow",
        Action = [
          "synthetics:*",
          "cloudwatch:*",
          "logs:*"
        ],
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

# Package Lambda function with dependencies



resource "null_resource" "package_lambda" {
  provisioner "local-exec" {
    command = "rm -rf lambda_build lambda_function.zip && mkdir lambda_build && cp lambda_function.py lambda_build/ && pip install -r requirements.txt -t lambda_build/ && cd lambda_build && zip -r ../lambda_function.zip ."
  }

  triggers = {
    always_run = "${timestamp()}"
  }
}


# Lambda Function
resource "aws_lambda_function" "test_lambda" {
  function_name = "test-lambda-function"
  role          = aws_iam_role.lambda_role.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.9"
  filename      = "${path.module}/lambda_function.zip"
  

  depends_on = [null_resource.package_lambda]
}
