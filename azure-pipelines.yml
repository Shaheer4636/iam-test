############################
# s3.tf
############################

# Canonical user ID used as fallback owner for grants
data "aws_canonical_user_id" "this" {}

locals {
  # Allow grant to be either JSON string or HCL list(map)
  grants            = try(jsondecode(var.grant), var.grant)
  lower_bucket_name = lower(var.bucket_name)
}

# Reuse the shared S3 bucket module from your org
module "s3" {
  # NOTE: Terraform forbids variables in module.source; keep this hard-coded
  source = "git::https://samcado.visualstudio.com/DEVOPS_Platform_as_a_Service/_git/s3//terraform-3.1.0-s3-bucket?ref=refs/tags/4.2.0"

  bucket = local.lower_bucket_name

  # Versioning block per the module’s expected shape
  versioning = {
    enabled = var.versioning_enabled
  }

  attach_policy                        = true
  force_destroy                        = var.force_destroy

  # Public access + ownership controls
  block_public_acls       = var.block_public_acls
  block_public_policy     = var.block_public_policy
  ignore_public_acls      = var.ignore_public_acls
  restrict_public_buckets = var.restrict_public_buckets

  control_object_ownership  = var.control_object_ownership
  object_ownership          = var.object_ownership          # e.g. "BucketOwnerEnforced"
  object_lock_enabled       = var.object_lock_enabled
  object_lock_configuration = var.object_lock_configuration

  # SSE and optional bucket policy/lifecycle
  server_side_encryption_configuration = var.server_side_encryption_configuration
  policy                               = var.bucket_policy_json
  lifecycle_rule                       = var.lifecycle_rule

  # Tags (cast bool to string for module’s map(string))
  tags = merge(
    {
      Name                       = local.lower_bucket_name
      continuous_backups_enabled = tostring(var.continuous_backups_enabled)
    },
    var.tags
  )
}

# Only create an ACL resource when:
#  - object ownership is NOT BucketOwnerEnforced (AWS forbids ACLs in that mode)
#  - AND an ACL value or explicit grants were provided
resource "aws_s3_bucket_acl" "this" {
  depends_on = [module.s3]

  count = var.object_ownership == "BucketOwnerEnforced" ? 0 :
          (((var.acl != null && var.acl != "null" && var.acl != "") || length(local.grants) > 0) ? 1 : 0)

  bucket                = module.s3.s3_bucket_id
  expected_bucket_owner = var.expected_bucket_owner

  # apply only if provided (count guards empty path)
  acl = (var.acl != null && var.acl != "null" && var.acl != "") ? var.acl : null

  # Optional explicit grants
  dynamic "access_control_policy" {
    for_each = length(local.grants) > 0 ? [true] : []
    content {
      dynamic "grant" {
        for_each = local.grants
        content {
          permission = grant.value.permission
          grantee {
            type          = grant.value.type
            id            = try(grant.value.id, null)
            uri           = try(grant.value.uri, null)
            email_address = try(grant.value.email, null)
          }
        }
      }
      owner {
        id           = try(var.owner["id"], data.aws_canonical_user_id.this.id)
        display_name = try(var.owner["display_name"], null)
      }
    }
  }
}
