# azure-pipelines.yml — Client-Uptime-Report-Obs
trigger: none

# Pre-authorize cross-project repo (ADO will prompt “Authorize resources” once)
resources:
  repositories:
    - repository: s3mod
      type: git
      name: DEVOPS_Platform_as_a_Service/s3
      ref: refs/tags/4.2.0

parameters:
- name: awsServiceConnection
  type: string
  default: "SAMCObservability-492046385895-DEVOPSIACSVCVPC-Infrastructure Operations"

- name: awsRegion
  type: string
  default: "us-east-1"
  values: ["us-east-1","us-east-2"]

- name: moduleRef            # tag/branch/commit for the shared s3 module
  type: string
  default: "refs/tags/4.2.0"

- name: tfvarsFile
  type: string
  default: "dev.tfvars"

- name: tfPlanOnly
  type: boolean
  default: true              # set false to apply

# >>> PAT as a parameter (your request). NOTE: parameters are NOT secret. <<<
- name: adoPat
  type: string
  default: ""                # paste a PAT with "Code: Read" on DEVOPS_Platform_as_a_Service

pool:
  vmImage: "ubuntu-latest"

stages:
- stage: s3
  displayName: "Deploy S3 module (visualstudio.com + PAT)"
  jobs:
  - job: terraform
    displayName: "Terraform init/plan/apply"
    steps:
      - checkout: self
      - checkout: s3mod
        path: _authorized_s3_repo   # not used by TF; helps ADO pre-authorize

      - script: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y unzip jq
          TFV="1.12.2"
          curl -sSLo /tmp/terraform_${TFV}_linux_amd64.zip "https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip"
          sudo unzip -o /tmp/terraform_${TFV}_linux_amd64.zip -d /usr/local/bin
          terraform -version
          jq --version
        displayName: "Install Terraform 1.12.2 + jq"

      - task: AWSShellScript@1
        displayName: "Terraform init/plan/apply (AWS creds)"
        inputs:
          awsCredentials: ${{ parameters.awsServiceConnection }}
          regionName: ${{ parameters.awsRegion }}
          scriptType: "inline"
          inlineScript: |
            set -euo pipefail
            export TF_IN_AUTOMATION=1
            export GIT_TERMINAL_PROMPT=0

            # --- Auth for visualstudio.com/dev.azure.com using PAT via ~/.netrc ---
            if [ -n "${ADO_PAT:-}" ]; then
              umask 077
              # Avoid echoing the PAT to logs
              { 
                echo "machine samcado.visualstudio.com"
                echo "  login pat"
                echo "  password ${ADO_PAT}"
                echo "machine dev.azure.com"
                echo "  login pat"
                echo "  password ${ADO_PAT}"
              } > ~/.netrc
            fi
            # ----------------------------------------------------------------------

            echo "Sanity: cross-project repo access (visualstudio.com)"
            git ls-remote "https://samcado.visualstudio.com/DEVOPS_Platform_as_a_Service/_git/s3" >/dev/null

            cd infra

            echo "terraform init (moduleRef=${MODULE_REF})"
            terraform init -input=false

            echo "terraform validate"
            terraform validate

            echo "terraform plan (-var-file=${TFVARS_FILE})"
            terraform plan -input=false \
              -var "module_ref=${MODULE_REF}" \
              -var-file="${TFVARS_FILE}"

            if [ "${TF_PLAN_ONLY}" = "false" ]; then
              terraform apply -input=false -auto-approve \
                -var "module_ref=${MODULE_REF}" \
                -var-file="${TFVARS_FILE}"
            else
              echo "Plan-only mode active; skipping apply."
            fi
        env:
          ADO_PAT: ${{ parameters.adoPat }}         # PAT from parameter
          MODULE_REF: ${{ parameters.moduleRef }}
          TFVARS_FILE: ${{ parameters.tfvarsFile }}
          TF_PLAN_ONLY: ${{ parameters.tfPlanOnly }}
