terraform {
  required_version = ">= 1.3.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.0"
    }
  }
}

provider "aws" {
  region = var.region
}

# -----------------------------
# Role: <name_prefix>-<env>-canary-role
# Canary needs S3 + CloudWatch/Logs full access
# -----------------------------
resource "aws_iam_role" "canary_role" {
  name = "${var.name_prefix}-${var.env}-canary-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid      = "SyntheticsAssumeRole"
        Effect   = "Allow"
        Action   = "sts:AssumeRole"
        Principal = {
          Service = "synthetics.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "canary_full_access" {
  name        = "${var.name_prefix}-${var.env}-canary-fullaccess"
  description = "Full S3 and CloudWatch/Logs for CloudWatch Synthetics canaries"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid: "S3Full",
        Effect: "Allow",
        Action: ["s3:*"],
        Resource: ["*"]
      },
      {
        Sid: "CloudWatchFull",
        Effect: "Allow",
        Action: ["cloudwatch:*"],
        Resource: ["*"]
      },
      {
        Sid: "LogsFull",
        Effect: "Allow",
        Action: ["logs:*"],
        Resource: ["*"]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "canary_attach" {
  role       = aws_iam_role.canary_role.name
  policy_arn = aws_iam_policy.canary_full_access.arn
}

# -----------------------------
# Role: <name_prefix>-<env>-lambda-role
# Lambda needs S3 + ECR + CloudWatch/Logs full access
# -----------------------------
resource "aws_iam_role" "lambda_role" {
  name = "${var.name_prefix}-${var.env}-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid      = "LambdaAssumeRole"
        Effect   = "Allow"
        Action   = "sts:AssumeRole"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "lambda_full_access" {
  name        = "${var.name_prefix}-${var.env}-lambda-fullaccess"
  description = "Full S3, ECR, and CloudWatch/Logs for Lambda functions"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid: "S3Full",
        Effect: "Allow",
        Action: ["s3:*"],
        Resource: ["*"]
      },
      {
        Sid: "ECRFull",
        Effect: "Allow",
        Action: [
          "ecr:*",
          "ecr-public:*",
          "sts:GetServiceBearerToken",           # for ECR Public
          "ecr:GetAuthorizationToken"            # requires "*"
        ],
        Resource: ["*"]
      },
      {
        Sid: "CloudWatchFull",
        Effect: "Allow",
        Action: ["cloudwatch:*"],
        Resource: ["*"]
      },
      {
        Sid: "LogsFull",
        Effect: "Allow",
        Action: ["logs:*"],
        Resource: ["*"]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_attach" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_full_access.arn
}

# Optional but useful for Lambda basic logging bootstrap
resource "aws_iam_role_policy_attachment" "lambda_basic_logs" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# -----------------------------
# Outputs
# -----------------------------
output "canary_role_name" { value = aws_iam_role.canary_role.name }
output "canary_role_arn"  { value = aws_iam_role.canary_role.arn  }
output "lambda_role_name" { value = aws_iam_role.lambda_role.name }
output "lambda_role_arn"  { value = aws_iam_role.lambda_role.arn  }
