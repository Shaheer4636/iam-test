# azure-pipelines.yml
trigger: none

parameters:
- name: awsServiceConnection
  type: string
  default: "SAMCObservability-492046385895-DEVOPSIACSVCVPC-Infrastructure Operations"
- name: awsRegion
  type: string
  default: "us-east-1"
  values: ["us-east-1","us-east-2"]
- name: tfPlanOnly
  type: boolean
  default: true
- name: adoPat
  type: string
  default: ""
- name: tfWorkingDir
  type: string
  default: "auto"

pool:
  vmImage: ubuntu-latest

stages:
- stage: s3
  displayName: Deploy S3 (S3 backend)
  jobs:
  - job: terraform
    displayName: Terraform init/plan/apply
    steps:
    - checkout: self

    - script: |
        set -euo pipefail
        sudo apt-get update -y
        sudo apt-get install -y unzip jq
        TFV="1.12.2"
        curl -sSLo /tmp/tf.zip "https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip"
        sudo unzip -o /tmp/tf.zip -d /usr/local/bin
        terraform -version
      displayName: Install Terraform

    - task: AWSShellScript@1
      displayName: Terraform plan/apply (AWS creds)
      inputs:
        awsCredentials: ${{ parameters.awsServiceConnection }}
        regionName: ${{ parameters.awsRegion }}
        scriptType: inline
        inlineScript: |
          set -euo pipefail
          export TF_IN_AUTOMATION=1
          export GIT_TERMINAL_PROMPT=0

          # boolean normalize
          TF_PLAN_ONLY_STR="$(printf '%s' "${TF_PLAN_ONLY:-}" | tr '[:upper:]' '[:lower:]')"

          ROOT="$BUILD_SOURCESDIRECTORY"
          [ -d "$ROOT/$BUILD_REPOSITORY_NAME" ] && ROOT="$ROOT/$BUILD_REPOSITORY_NAME"
          echo "ROOT=$ROOT"

          if [ -n "${ADO_PAT:-}" ]; then
            umask 077
            printf "machine dev.azure.com\n  login pat\n  password %s\n" "$ADO_PAT" > ~/.netrc
            printf "machine samcado.visualstudio.com\n  login pat\n  password %s\n" "$ADO_PAT" >> ~/.netrc
          fi

          TF_DIR="$ROOT"
          if [ "${TF_WORKING_DIR:-auto}" = "auto" ]; then
            TF_DIR="$(find "$ROOT" -maxdepth 4 -type f -name '*.tf' -printf '%h\n' | sort -u | head -n 1 || true)"
            [ -n "$TF_DIR" ] || { echo "No *.tf found under $ROOT"; exit 51; }
          else
            TF_DIR="$ROOT/${TF_WORKING_DIR}"
            [ -d "$TF_DIR" ] || { echo "Missing TF dir: $TF_DIR"; exit 52; }
          fi
          echo "TF_DIR=$TF_DIR"

          [ -f "$TF_DIR/backend.hcl" ] || {
            printf 'bucket = "testdemobackend03096174636"\nkey = "client-uptime-report-obs/terraform.tfstate"\nregion = "us-east-1"\n' > "$TF_DIR/backend.hcl"
          }

          cd "$TF_DIR"
          terraform init -input=false -backend-config=backend.hcl -reconfigure
          terraform validate

          if [ -f dev.tfvars ]; then
            terraform plan -input=false -var-file=dev.tfvars
          else
            terraform plan -input=false
          fi

          if [ "$TF_PLAN_ONLY_STR" = "false" ]; then
            if [ -f dev.tfvars ]; then terraform apply -input=false -auto-approve -var-file=dev.tfvars; else terraform apply -input=false -auto-approve; fi
          fi

          [ -f ~/.netrc ] && rm -f ~/.netrc
      env:
        ADO_PAT: ${{ parameters.adoPat }}
        TF_PLAN_ONLY: ${{ parameters.tfPlanOnly }}
        TF_WORKING_DIR: ${{ parameters.tfWorkingDir }}
