variable "aws_region" {
  description = "AWS region to deploy into"
  type        = string
  default     = "us-east-1"
}

# Pin the external module to a ref (tag/branch/commit)


variable "bucket_name" {
  description = "S3 bucket name (will be lowercased)"
  type        = string
}

variable "versioning_enabled" {
  description = "Enable S3 versioning"
  type        = bool
  default     = true
}

variable "force_destroy" {
  description = "Allow destroy even with non-empty bucket"
  type        = bool
  default     = false
}

variable "block_public_acls" {
  type    = bool
  default = true
}

variable "block_public_policy" {
  type    = bool
  default = true
}

variable "ignore_public_acls" {
  type    = bool
  default = true
}

variable "restrict_public_buckets" {
  type    = bool
  default = true
}

variable "control_object_ownership" {
  description = "Enable/disable object ownership control toggle in module"
  type        = bool
  default     = true
}

variable "object_ownership" {
  description = "Valid values: BucketOwnerEnforced, BucketOwnerPreferred, ObjectWriter"
  type        = string
  default     = "BucketOwnerEnforced"
}

variable "object_lock_enabled" {
  type    = bool
  default = false
}

variable "object_lock_configuration" {
  description = "Pass-through to module; set to null if unused"
  type        = any
  default     = null
}

variable "lifecycle_rule" {
  description = "List of lifecycle rule objects expected by the module"
  type        = any
  default     = []
}

variable "server_side_encryption_configuration" {
  description = "Server-side encryption configuration object for the bucket"
  type        = any
  default     = null
}

variable "bucket_policy_json" {
  description = "Complete bucket policy JSON (string). Leave empty for none."
  type        = string
  default     = null
}

variable "continuous_backups_enabled" {
  description = "Tag only, for your internal reporting"
  type        = bool
  default     = false
}

variable "tags" {
  description = "Additional tags to merge"
  type        = map(string)
  default     = {}
}

# ACL/Grant passthrough for aws_s3_bucket_acl resource
variable "acl" {
  description = "Canned ACL or null"
  type        = string
  default     = null
}

variable "grant" {
  description = "Either a list(map) of grants or a JSON string representing that structure"
  type        = any
  default     = []
}

variable "owner" {
  description = "Optional owner map { id = canonical_id, display_name = ... }"
  type        = map(string)
  default     = {}
}

variable "module_ref" {
  description = "ADO Git ref for the s3 module (e.g., refs/tags/4.2.0)"
  type        = string
  default     = "refs/tags/4.2.0"
}

variable "expected_bucket_owner" {
  description = "Account ID expected to own the bucket"
  type        = string
  default     = null
}

dev.tfvars
aws_region  = "us-east-1"
module_ref  = "refs/tags/4.2.0"

bucket_name = "client-uptime-report-obs-artifacts"

versioning_enabled = true
force_destroy      = false

block_public_acls   = true
block_public_policy = true
ignore_public_acls  = true
restrict_public_buckets = true

control_object_ownership = true
object_ownership         = "BucketOwnerEnforced"

object_lock_enabled       = false
object_lock_configuration = null

# Example lifecycle rule (adjust to your needs or leave empty list)
lifecycle_rule = [
  {
    id      = "noncurrent-30"
    enabled = true
    noncurrent_version_expiration = {
      days = 30
    }
  }
]

# SSE example (KMS). Set to null to let the module default.
server_side_encryption_configuration = {
  rule = {
    apply_server_side_encryption_by_default = {
      sse_algorithm     = "aws:kms"
      kms_master_key_id = "alias/aws/s3"
    }
  }
}

# Optional full bucket policy JSON (string). null means none.
bucket_policy_json = null

continuous_backups_enabled = false

tags = {
  env         = "sandbox"
  owner       = "observability"
  application = "client-uptime-report-obs"
}

# ACL/grants normally not needed with BucketOwnerEnforced, so keep null/empty
acl                    = null
grant                  = []
owner                  = {}
expected_bucket_owner  = null


