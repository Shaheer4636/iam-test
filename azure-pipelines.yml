# azure-pipelines.yml  â€” Client-Uptime-Report-Obs
trigger: none

# If you want to keep your templates/resource declarations, add them here.
# Not required for the cross-project module, which is fetched by Terraform via HTTPS.

parameters:
  # --- Connections ---
  - name: awsServiceConnection              # AWS creds used by the AWS provider + CLI
    type: string
    default: DevopsSandbox-889050139813-DevopsIACSvcVpc
  - name: tfServiceConnection               # Terraform service connection (org policy)
    type: string
    default: DevopsSandbox-889050139813-DevopsIACSvcVpc-us-east-1

  # --- Region & module pin ---
  - name: awsRegion
    type: string
    default: 'us-east-1'
    values: ['us-east-1','us-east-2']
  - name: moduleRef                         # Tag/branch/commit for the shared S3 module
    type: string
    default: 'refs/tags/4.2.0'

  # --- TF inputs ---
  - name: tfvarsFile
    type: string
    default: 'dev.tfvars'
  - name: tfPlanOnly
    type: boolean
    default: true

  # --- Which Terraform CLI extension to bind (fixes ambiguity) ---
  # Your org has both vendors installed; choose exactly one below.
  - name: tfTaskProvider
    type: string
    default: 'charleszipp'     # or 'jason'
    values:
      - charleszipp
      - jason

pool:
  vmImage: ubuntu-latest

stages:
- stage: s3
  displayName: Deploy S3 module (Method B, both connections)
  jobs:
  - job: terraform
    displayName: Terraform (init/plan/apply)
    steps:
      # ---------------------------------------------------------------
      # Tooling
      # ---------------------------------------------------------------
      - script: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y unzip jq
          TFV="1.12.2"
          curl -sSLo /tmp/terraform_${TFV}_linux_amd64.zip https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip
          sudo unzip -o /tmp/terraform_${TFV}_linux_amd64.zip -d /usr/local/bin
          terraform -version
          jq --version
        displayName: Install Terraform 1.12.2 + jq

      # ---------------------------------------------------------------
      # Bind the Terraform service connection (org policy satisfaction)
      # Use fully-qualified IDs to avoid the "ambiguous task" error.
      # Only ONE of these runs based on tfTaskProvider parameter.
      # ---------------------------------------------------------------

      # Provider A: Charles Zipp
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: Bind TF service connection (version) [charleszipp]
        condition: and(succeeded(), eq('${{ parameters.tfTaskProvider }}', 'charleszipp'))
        inputs:
          command: version
          workingDirectory: infra
          environmentServiceName: ${{ parameters.tfServiceConnection }}

      # Provider B: Jason B Johnson
      - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: Bind TF service connection (version) [jason]
        condition: and(succeeded(), eq('${{ parameters.tfTaskProvider }}', 'jason'))
        inputs:
          command: version
          workingDirectory: infra
          environmentServiceName: ${{ parameters.tfServiceConnection }}

      # ---------------------------------------------------------------
      # Real Terraform work under AWS creds; also add ADO bearer so
      # 'terraform init' can fetch the module across projects (Method B).
      # ---------------------------------------------------------------
      - task: AWSShellScript@1
        displayName: Terraform init/plan/apply (AWS creds)
        inputs:
          awsCredentials: ${{ parameters.awsServiceConnection }}
          regionName: ${{ parameters.awsRegion }}
          scriptType: inline
          inlineScript: |
            set -euo pipefail

            echo "Configuring ADO bearer header so terraform can fetch the cross-project module..."
            git config --global http.https://dev.azure.com.extraheader "AUTHORIZATION: bearer ${SYSTEM_ACCESSTOKEN}"

            echo "Sanity check: can read module repo?"
            git ls-remote "https://dev.azure.com/samcado/Infrastructure%20Operations/_git/DEVOPS_Platform_as_a_Service/s3" >/dev/null

            cd infra

            echo "terraform init (moduleRef=${MODULE_REF})"
            terraform init -input=false

            echo "terraform validate"
            terraform validate

            echo "terraform plan (-var-file=${TFVARS_FILE})"
            terraform plan -input=false \
              -var "module_ref=${MODULE_REF}" \
              -var-file="${TFVARS_FILE}"

            if [ "${TF_PLAN_ONLY}" = "false" ]; then
              echo "terraform apply"
              terraform apply -input=false -auto-approve \
                -var "module_ref=${MODULE_REF}" \
                -var-file="${TFVARS_FILE}"
            else
              echo "Plan-only mode active; skipping apply."
            fi
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)          # for Method B HTTPS fetch
          MODULE_REF:        ${{ parameters.moduleRef }}
          TFVARS_FILE:       ${{ parameters.tfvarsFile }}
          TF_PLAN_ONLY:      ${{ parameters.tfPlanOnly }}
