# azure-pipelines.yml â€” Client-Uptime-Report-Obs (no Terraform task extension needed)
trigger: none

# ==== EDIT THESE TWO NAMES TO EXACTLY MATCH YOUR SERVICE CONNECTIONS ====
variables:
  aws_sc: 'SAMCObservability-492046385895-DEVOPSIACSVCVPC-Infrastructure Operations'                 # <-- exact AWS SC name
  # If you don't have/need a separate Terraform SC, leave this blank
  tf_sc:  'SAMCObservability-492046385895-DEVOPSIACSVCVPC-us-east-1-Infrastructure Operations'                                                           
parameters:
- name: awsRegion
  type: string
  default: 'us-east-1'
  values: ['us-east-1','us-east-2']
- name: moduleRef
  type: string
  default: 'refs/tags/4.2.0'
- name: tfvarsFile
  type: string
  default: 'dev.tfvars'
- name: tfPlanOnly
  type: boolean
  default: true

pool:
  vmImage: ubuntu-latest

stages:
- stage: s3
  displayName: Deploy S3 module (Method B)
  jobs:
  - job: terraform
    displayName: Terraform (init/plan/apply)
    steps:
      # Sanity check your service connection names before we do anything expensive
      - script: |
          echo "AWS SC = '$(aws_sc)'"
          if [ -z "$(aws_sc)" ]; then echo "ERROR: aws_sc variable is empty. Fix the name at top of YAML."; exit 1; fi
        displayName: Sanity: print SC names

      # Install Terraform + jq
      - script: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y unzip jq
          TFV="1.12.2"
          curl -sSLo /tmp/terraform_${TFV}_linux_amd64.zip https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip
          sudo unzip -o /tmp/terraform_${TFV}_linux_amd64.zip -d /usr/local/bin
          terraform -version
          jq --version
        displayName: Install Terraform 1.12.2 + jq

      # Run Terraform under AWS credentials; add ADO bearer so module fetch works
      - task: AWSShellScript@1
        displayName: Terraform init/plan/apply (AWS creds)
        inputs:
          awsCredentials: $(aws_sc)             # <-- must match exact SC name
          regionName: ${{ parameters.awsRegion }}
          scriptType: inline
          inlineScript: |
            set -euo pipefail

            echo "Configuring ADO bearer header so terraform can fetch the cross-project module..."
            git config --global http.https://dev.azure.com.extraheader "AUTHORIZATION: bearer ${SYSTEM_ACCESSTOKEN}"

            echo "Optional sanity check: can read shared s3 module repo?"
            git ls-remote "https://dev.azure.com/samcado/Infrastructure%20Operations/_git/DEVOPS_Platform_as_a_Service/s3" >/dev/null

            cd infra

            echo "terraform init (moduleRef=${MODULE_REF})"
            terraform init -input=false

            echo "terraform validate"
            terraform validate

            echo "terraform plan (-var-file=${TFVARS_FILE})"
            terraform plan -input=false \
              -var "module_ref=${MODULE_REF}" \
              -var-file="${TFVARS_FILE}"

            if [ "${TF_PLAN_ONLY}" = "false" ]; then
              echo "terraform apply"
              terraform apply -input=false -auto-approve \
                -var "module_ref=${MODULE_REF}" \
                -var-file="${TFVARS_FILE}"
            else
              echo "Plan-only mode active; skipping apply."
            fi
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)          # for Method B HTTPS fetch
          MODULE_REF:        ${{ parameters.moduleRef }}
          TFVARS_FILE:       ${{ parameters.tfvarsFile }}
          TF_PLAN_ONLY:      ${{ parameters.tfPlanOnly }}
