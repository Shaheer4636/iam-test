# azure-pipelines.yml  (Client-Uptime-Report-Obs)
trigger: none

parameters:
- name: awsServiceConnection
  type: string
  default: SAMCObservability-492046385895-DEVOPSIACSVCVPC-Infrastructure Operations
- name: tfServiceConnection          # Terraform service connection (satisfy org policy)
  type: string
  default: SAMCObservability-492046385895-DEVOPSIACSVCVPC-us-east-1-Infrastructure Operations
- name: awsRegion
  type: string
  default: 'us-east-1'
  values: ['us-east-1','us-east-2']
- name: moduleRef
  type: string
  default: 'refs/tags/4.2.0'
- name: tfvarsFile
  type: string
  default: 'dev.tfvars'
- name: tfPlanOnly
  type: boolean
  default: true

pool:
  vmImage: ubuntu-latest

stages:
- stage: s3
  displayName: S3 via shared module
  jobs:
  - job: terraform
    displayName: Terraform (init/plan/apply)
    steps:
      # --- Pin TF to match your estate; jq for JSON ops
      - script: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y unzip jq
          TFV="1.12.2"
          curl -sSLo /tmp/terraform_${TFV}_linux_amd64.zip https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip
          sudo unzip -o /tmp/terraform_${TFV}_linux_amd64.zip -d /usr/local/bin
          terraform -version
        displayName: Install Terraform 1.12.2 + jq

      # --- “Touch” the Terraform service connection so org rules are satisfied.
      # If you have the official Terraform CLI task installed, this step will bind to the TF service connection.
      # It does not do backend auth here; we still use AWS creds for the provider below.
      - task: TerraformCLI@0
        displayName: Touch TF service connection (version)
        inputs:
          command: version
          workingDirectory: infra
          # Some orgs require referencing a TF SC explicitly. This binds the SC to the run.
          # If your TF service connection type is named differently in your org, change the field accordingly.
          environmentServiceName: ${{ parameters.tfServiceConnection }}

      # --- Real TF work under AWS creds; also add ADO bearer so module source over HTTPS works.
      - task: AWSShellScript@1
        displayName: Terraform init/plan/apply (AWS creds)
        inputs:
          awsCredentials: ${{ parameters.awsServiceConnection }}
          regionName: ${{ parameters.awsRegion }}
          scriptType: inline
          inlineScript: |
            set -e

            echo "Configuring ADO bearer header so terraform can fetch the cross-project module..."
            git config --global http.https://dev.azure.com.extraheader "AUTHORIZATION: bearer ${SYSTEM_ACCESSTOKEN}"

            cd infra

            echo "terraform init (moduleRef=${MODULE_REF})"
            terraform init -input=false

            echo "terraform validate"
            terraform validate

            echo "terraform plan (-var-file=${TFVARS_FILE})"
            terraform plan -input=false -var "module_ref=${MODULE_REF}" -var-file="${TFVARS_FILE}"

            if [ "${TF_PLAN_ONLY}" = "false" ]; then
              echo "terraform apply"
              terraform apply -input=false -auto-approve -var "module_ref=${MODULE_REF}" -var-file="${TFVARS_FILE}"
            else
              echo "Plan-only mode active; skipping apply."
            fi
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          MODULE_REF: ${{ parameters.moduleRef }}
          TFVARS_FILE: ${{ parameters.tfvarsFile }}
          TF_PLAN_ONLY: ${{ parameters.tfPlanOnly }}
