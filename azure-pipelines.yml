# azure-pipelines.yml (Bash-only variant)
trigger: none

parameters:
- name: tfPlanOnly
  type: boolean
  default: true
- name: adoPat
  type: string
  default: ""
- name: tfWorkingDir
  type: string
  default: "auto"

pool:
  vmImage: ubuntu-latest

stages:
- stage: s3
  jobs:
  - job: terraform
    steps:
    - checkout: self
    - script: |
        set -euo pipefail
        sudo apt-get update -y
        sudo apt-get install -y unzip jq
        TFV="1.12.2"
        curl -sSLo /tmp/terraform_${TFV}_linux_amd64.zip "https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip"
        sudo unzip -o /tmp/terraform_${TFV}_linux_amd64.zip -d /usr/local/bin
        terraform -version
        jq --version
      displayName: Install Terraform
    - bash: |
        set -euo pipefail
        TF_PLAN_ONLY_STR="$(printf '%s' "${TF_PLAN_ONLY:-}" | tr '[:upper:]' '[:lower:]')"
        export TF_IN_AUTOMATION=1
        export GIT_TERMINAL_PROMPT=0

        ROOT="$BUILD_SOURCESDIRECTORY"
        REPO="$BUILD_REPOSITORY_NAME"
        if [ -d "$ROOT/$REPO" ]; then ROOT="$ROOT/$REPO"; fi

        if [ -n "${ADO_PAT:-}" ]; then
          umask 077
          cat > ~/.netrc <<EOF
machine samcado.visualstudio.com
  login pat
  password ${ADO_PAT}
machine dev.azure.com
  login pat
  password ${ADO_PAT}
EOF
        fi

        if [ "${TF_WORKING_DIR:-auto}" = "auto" ]; then
          TF_DIR="$(find "$ROOT" -maxdepth 4 -type f -name '*.tf' -printf '%h\n' | sort -u | head -n 1 || true)"
          if [ -z "$TF_DIR" ]; then
            echo "ERROR: No Terraform files (*.tf) found under $ROOT"
            exit 51
          fi
        else
          TF_DIR="$ROOT/${TF_WORKING_DIR}"
          [ -d "$TF_DIR" ] || { echo "ERROR: $TF_DIR not found"; exit 52; }
        fi

        [ -f "$TF_DIR/backend.hcl" ] || cat > "$TF_DIR/backend.hcl" <<'HCL'
bucket = "testdemobackend03096174636"
key    = "client-uptime-report-obs/terraform.tfstate"
region = "us-east-1"
HCL

        cd "$TF_DIR"
        terraform init -input=false -backend-config=backend.hcl -reconfigure
        terraform validate
        if [ -f dev.tfvars ]; then
          terraform plan -input=false -var-file=dev.tfvars
        else
          terraform plan -input=false
        fi
        if [ "$TF_PLAN_ONLY_STR" = "false" ]; then
          if [ -f dev.tfvars ]; then terraform apply -input=false -auto-approve -var-file=dev.tfvars; else terraform apply -input=false -auto-approve; fi
        fi

        if [ -n "${ADO_PAT:-}" ] && [ -f ~/.netrc ]; then shred -u ~/.netrc || rm -f ~/.netrc; fi
      env:
        ADO_PAT: ${{ parameters.adoPat }}
        TF_PLAN_ONLY: ${{ parameters.tfPlanOnly }}
        TF_WORKING_DIR: ${{ parameters.tfWorkingDir }}
      displayName: Terraform plan/apply
