provider "aws" {
  region = "us-east-1"
}

# S3 Bucket
resource "aws_s3_bucket" "test_bucket" {
  bucket = "test-s3-bucket-for-lambda-access"
  acl    = "private"
}

# IAM Role for Lambda (original)
resource "aws_iam_role" "lambda_role" {
  name = "lambda-test-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# IAM Policy for full access to S3 and CloudWatch Synthetics (original)
resource "aws_iam_policy" "lambda_policy" {
  name        = "lambda-full-access-policy"
  description = "Full access to S3 bucket and CloudWatch Synthetics"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:*"
        ],
        Resource = [
          aws_s3_bucket.test_bucket.arn,
          "${aws_s3_bucket.test_bucket.arn}/*"
        ]
      },
      {
        Effect = "Allow",
        Action = [
          "synthetics:*",
          "cloudwatch:*",
          "logs:*"
        ],
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

# Package Lambda function with dependencies (original)
resource "null_resource" "package_lambda" {
  provisioner "local-exec" {
    command = "rm -rf lambda_build lambda_function.zip && mkdir lambda_build && cp lambda_function.py lambda_build/ && pip install -r requirements.txt -t lambda_build/ && cd lambda_build && zip -r ../lambda_function.zip ."
  }

  triggers = {
    always_run = "${timestamp()}"
  }
}

# Lambda Function (original)
resource "aws_lambda_function" "test_lambda" {
  function_name = "test-lambda-function"
  role          = aws_iam_role.lambda_role.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.9"
  filename      = "${path.module}/lambda_function.zip"

  depends_on = [null_resource.package_lambda]
}

# ============================================================
# ADDITIONS START HERE â€” as requested, no changes above
# ============================================================

# ---------------------------
# Canary Role: S3 + CloudWatch + Logs (full)
# ---------------------------
resource "aws_iam_role" "canary_role" {
  name = "samc-obs-sandbox-canary-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid      = "SyntheticsAssumeRole",
        Effect   = "Allow",
        Action   = "sts:AssumeRole",
        Principal = {
          Service = "synthetics.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "canary_full_access" {
  name        = "samc-obs-sandbox-canary-fullaccess"
  description = "Full S3 and CloudWatch/Logs for CloudWatch Synthetics canaries"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid    = "S3Full",
        Effect = "Allow",
        Action = ["s3:*"],
        Resource = ["*"]
      },
      {
        Sid    = "CloudWatchFull",
        Effect = "Allow",
        Action = ["cloudwatch:*"],
        Resource = ["*"]
      },
      {
        Sid    = "LogsFull",
        Effect = "Allow",
        Action = ["logs:*"],
        Resource = ["*"]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "canary_attach" {
  role       = aws_iam_role.canary_role.name
  policy_arn = aws_iam_policy.canary_full_access.arn
}

# ---------------------------
# LambdaFunction Role: S3 + ECR + CloudWatch + Logs (full)
# ---------------------------
resource "aws_iam_role" "lambdafunction_role" {
  name = "samc-obs-sandbox-lambdafunction-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid      = "LambdaAssumeRole",
        Effect   = "Allow",
        Action   = "sts:AssumeRole",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "lambdafunction_full_access" {
  name        = "samc-obs-sandbox-lambdafunction-fullaccess"
  description = "Full S3, ECR (incl. public), and CloudWatch/Logs for Lambda functions"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid    = "S3Full",
        Effect = "Allow",
        Action = ["s3:*"],
        Resource = ["*"]
      },
      {
        Sid    = "ECRFull",
        Effect = "Allow",
        Action = [
          "ecr:*",
          "ecr-public:*",
          "ecr:GetAuthorizationToken",   # requires Resource="*"
          "sts:GetServiceBearerToken"    # for ECR Public auth
        ],
        Resource = ["*"]
      },
      {
        Sid    = "CloudWatchFull",
        Effect = "Allow",
        Action = ["cloudwatch:*"],
        Resource = ["*"]
      },
      {
        Sid    = "LogsFull",
        Effect = "Allow",
        Action = ["logs:*"],
        Resource = ["*"]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambdafunction_attach" {
  role       = aws_iam_role.lambdafunction_role.name
  policy_arn = aws_iam_policy.lambdafunction_full_access.arn
}

# Basic logging policy (optional but harmless)
resource "aws_iam_role_policy_attachment" "lambdafunction_basic_logs" {
  role       = aws_iam_role.lambdafunction_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# ---------------------------
# Outputs for the new roles
# ---------------------------
output "canary_role_name" {
  value = aws_iam_role.canary_role.name
}

output "canary_role_arn" {
  value = aws_iam_role.canary_role.arn
}

output "lambdafunction_role_name" {
  value = aws_iam_role.lambdafunction_role.name
}

output "lambdafunction_role_arn" {
  value = aws_iam_role.lambdafunction_role.arn
}
